swagger: "2.0"
info:
  version: "1.1.0"
  title: Perfect place finder
  description: >
    This is a sample API for managing a database of users.  User accounts can be created, deleted, edited, and retrieved.
    Users can also log-in, which will create a session cookie. Logging out will delete the cookie.
host: localhost:9000
consumes:
  - application/json
produces:
  - application/json

paths:
  /user/register/:
    post:
      summary: Creates a new user
      description: Only the "admin" user can create users.
      parameters:
        - name: first name
          in: body
          required: true
          description: The user first name account to create

        - name: last name
          in: body
          required: true
          description: The user last name account to create

        - name: email
          in: body
          required: true
          description: The user email account to create

        - name: password
          in: body
          required: true
          description: The user password account to create
      responses:
        201:
          description: New user was created successfully
          headers:
            Location:
              type: string
              description: The Server returns the URL of the new user
        400:
          description: Bad JSON formatting in the request

  /user/login:
    post:
      summary: Logs in
      description: |
        Try logging in with username "jdoe" and password "jdoe".
        Then try logging in with username "admin" and password "admin".
      parameters:
        - name: email
          in: body
          required: true
          description: The login credentials
        - name: password
          in: body
          required: true
          description: The login credentials
      responses:
        200:
          description: Login was successful
          headers:
            Set-Cookie:
              type: string
              description: The session cookie
              default: demo-session-id=123456789012345678901234567890


  /user/logout:
    post:
      summary: Logs out the given user
      description: >
        Users can only log themselves out, not other users. Except the "admin" user, who can log-out anyone.
      responses:
        204:
          description: Logout was successful
          headers:
            Set-Cookie:
              type: string
              description: Deletes the session cookie (by making expire in the past)
              default: demo-session-id=deleted; Expires=Thu, 01-Jan-1970 00:00:01 GMT; Path=/
        401:
          description: You tried to log someone else out, and you're not the "admin" user.
        404:
          description: The {username} was not found

  /user/announcements:
    get:
      summary: Returns user's announcements.
      description: >
      parameters:
        - sessionCookie: &sessionCookie
          name: Cookie
          in: header
          required: true
          type: string
          description: The session cookie
      responses:
        204:
          description: Request was successful
        404:
          description: Session inexistent


  /favoriteAnnouncements:
    get:
      summary: Get favoriteAnnouncements by filters
      description: >
        Get the favoriteAnnouncements by filters written in query string.
      parameters:

        - name: city
          in: query
          required: true
          description: The announcements/favoriteAnnouncements in the given city.

        - name : transactionType
          in: query
          description: The type of announcement - for rent or for sale.
          required: false
        - name: square
          in: query
          description: The square ft of  estate.
          required: false
        - name: typeOfEstate
          in: query
          description: The type of  estate - appartment, house or commercial space.
          required: false
        - name: min price
          in: query
          description: The min price of  estate.
          required: false
        - name: max price
          in: query
          description: The max price of  estate.
          required: false
        - name: year
          in: query
          description: The year of construction of  estate.
          required: false

      responses:
        204:
          description: Request was successful
        401:
          description: You tried to log someone else out, and you're not the "admin" user.

  /favoriteAnnouncements/add:
    post:
      summary: Adds an annoucement.
      description: >
        Adds a new property/announcement into database.
      parameters:
         - name: category
           in: body
           description: The type of  estate - appartment, house or commercial space.
           required: true
         - name: rooms
           in: body
           description: The number of rooms of  estate.
           required: true
         - name: transactionType
           in: body
           description: The type of announcement - for rent or for sale.
           required: true
         - name: price
           in: body
           description: The price of  estate.
           required: true
         - name: surface
           in: body
           description: The surface of  estate.
           required: true
         - name: year
           in: body
           description: The year of construction of  estate.
           required: true
         - name: utilities
           in: body
           description: Type of utlities (detached/semi-detached) of  estate.
           required: true
         - name: description
           in: body
           description: A short description of  estate.
           required: true
         - name: contactTelephone
           in: body
           description: The cellphone number of users who posted the announcement.
           required: true

      responses:
        204:
          description: Request was successful, announcement added.
        401:
          description: You tried to add an announcement that already exists(address).


  /favoriteAnnouncements/details{id}:
    get:
      summary: Details about estate.
      description: >
          This endpoint returns a json response with details about given announcement(estate).
      parameters:
        - name: idEstate
          in: query
          description: The id of estate(announcement)
          required: true

      responses:
        204:
          description: Request was successful

        404:
          description: Announcement not found.

  /user/estate{id}:
    get:
      summary: Details about user's announcement(estate).
      description: >
          This endpoint returns a json response with details about user's announcement(estate), given by its id.

      parameters:
          - name: id
            in: query
            required: true
            description: id of given announcement
          - sessionCookie: &sessionCookie
            name: Cookie
            in: header
            required: true
            type: string
            description: The session cookie
      responses:
        204:
          description: Request was successful
        404:
          description: Session cookie inexistent

  /user/estate/update:
    post:
      summary: Updates details about an anouncement.
      description: >
        This endpoint updates a given announcement of the user logged in.

      parameters:
          - name: id
            in: body
            description: The id of estate(announcement)
            required: true
          - name: category
            in: body
            description: The type of  estate - appartment, house or commercial space.
            required: false
          - name: rooms
            in: body
            description: The number of rooms of  estate.
            required: false
          - name: transactionType
            in: body
            description: The type of announcement - for rent or for sale.
            required: false
          - name: price
            in: body
            description: The price of  estate.
            required: false
          - name: surface
            in: body
            description: The surface of  estate.
            required: false
          - name: year
            in: body
            description: The year of construction of  estate.
            required: false
          - name: utilities
            in: body
            description: Type of utlities (full/none) of  estate.
            required: false
          - name: division
            in: body
            description: Type of division (dettached/semi-detached) of  estate.
            required: false
          - name: description
            in: body
            description: A short description of  estate.
            required: false
      responses:
          301:
            description: Update was successful
          401:
            description: Session cookie inexistent

  /user/estate/delete:
    post:
      summary: Deletes an announcement.
      description: >
        This endpoint deletes a given announcement of the user logged in.

      parameters:
        - name: id
          in: body
          required: true
          description: id of given announcement
        - sessionCookie: &sessionCookie
          name: Cookie
          in: header
          required: true
          type: string
          description: The session cookie
      responses:
          301:
            description: Deleteion was successful
          401:
            description: Session cookie inexistent

  /user/send/message:
    post:
      summary: Sending a message to an user who posted the announcement.
      description: >
        This endpoint sends a request to server with a message for the user who posted the announcement.
      parameters:
        - name: id_user
          in: body
          required: true
          description: id of sender
        - name: id_receiver
          in: body
          required: true
          description: id of receiver(the user who posted the announcement)
        - name: id_announcement
          in: body
          required: true
          description: id of given announcement
        - sessionCookie: &sessionCookie
          name: Cookie
          in: header
          required: true
          type: string
          description: The session cookie
      responses:
          301:
            description: Sending message was successful
          401:
            description: Session cookie inexistent

  /user/get/messages:
      get:
        summary: Get received messages of user.
        description: >
          This endpoint sends a request to server to receive messages of the user logged in.
        parameters:
           - name: id_user
             in: body
             required: true
             description: id of user
           - name: Cookie
             in: header
             required: true
             type: string
             description: The session cookie
        responses:
          301:
            description: Get messages was successful
          401:
            description: Session cookie inexistent

  /user/delete/message:
      post:
        summary: Delete a message
        description: >
          The endpoint sends a request to server to delete a given message of the logged in user(in the specified session).
        parameters:
          - name: id_user
            in: body
            required: true
            description: id of user
          - name: id_message
            in: body
            required: true
            description: id of message to be deleted
          - name: Cookie
            in: header
            required: true
            type: string
            description: The session cookie
        responses:
          301:
            description: Deleting message was successful
          401:
            description: Session cookie inexistent

  /user/reply/message:
       post:
        summary: Reply to a message
        description: >
          The endpoint sends a request to server to send a reply message to  a received message of the logged in user(in the specified session).
        parameters:
          - name: id_user
            in: body
            required: true
            description: id of user
          - name: id_message
            in: body
            required: true
            description: id of message to be sent
          - name: email_receiver
            in: body
            required: true
            description: email of user to receive the message
          - name: Cookie
            in: header
            required: true
            type: string
            description: The session cookie
        responses:
          301:
            description: Sending message was successful
          401:
            description: Session cookie inexistent
          403:
            description: User email inexistent

  /user/update/password:
    post:
      summary: Update user password
      description: >
          The endpoint sends a request to server to change password if user is logged in.
      parameters:
        - name: newPassword
          in: body
          required: true
          type: string
          description: new user's password
        - name: confirmPassword
          in: body
          type: string
          required: true
        - name: Cookie
          in: header
          required: true
          type: string
          description: The session cookie
      responses:
          301:
            description: Update password succeeded
          401:
            description: Session cookie inexistent
          403:
            description: Invalid user passsword

  /user/favorites/announcements:
    get:
      summary: Get favorite announcements
      description: >
        This endpoint sends a request to server to get user's favorite announcements.
      parameters:
        - name: Cookie
          in: header
          required: true
          type: string
          description: The session cookie
      responses:
        301:
          description: Get announcements was successful
        401:
            description: Session cookie inexistent



